import requests

#Библиотека requests предоставляет удобный интерфейс для работы с HTTP-запросами,
# значительно упрощая взаимодействие с веб-сервисами и API. Она позволяет отправлять запросы различных
# типов (GET, POST, PUT, DELETE), управлять заголовками запросов и телами сообщений,
# а также обрабатывать ответы от серверов.

#Мы использовали библиотеку requests для выполнения нескольких задач:
#1. Получение данных с сервера:

url = 'https://jsonplaceholder.typicode.com/posts/1'
response = requests.get(url)

if response.status_code == 200:
    print(response.json())
else:
    print(f'Ошибка: {response.status_code}')

# Здесь мы отправляем GET-запрос к URL-адресу и получаем данные в формате JSON.
# Если запрос успешен (код состояния 200), выводим полученные данные, иначе сообщаем об ошибке.

#2. Отправка POST-запроса с данными:

url = 'https://httpbin.org/post'
payload = {'key1': 'value1', 'key2': 'value2'}

response = requests.post(url, data=payload)

print(response.text)

#Здесь мы создаем словарь с параметрами и отправляем их методом POST на указанный URL.
# Ответ сервера выводится на экран.

#3. Настройка заголовков запроса:

url = 'https://httpbin.org/get'
headers = {'User-Agent': 'MyApp/1.0'}

response = requests.get(url, headers=headers)

print(response.headers)

#Здесь мы добавляем пользовательский агент в заголовки запроса и отправляем GET-запрос.
# После этого выводятся заголовки ответа от сервера.

#Использование библиотеки requests упрощает работу с HTTP-протоколом, позволяя легко выполнять различные операции,
# такие как аутентификация, работа с файлами, куки и многое другое. Это делает Python мощным инструментом для
# разработки приложений, взаимодействующих с веб-серверами и API.



import numpy as np

#Библиотека NumPy спользуется для научных вычислений и обработки данных в Python.
# Она предоставляет средства для работы с многомерными массивами, математическими операциями над ними,
# а также включает множество функций для статистического анализа и линейной алгебры.

#1. Создание массива и выполнение арифметических операций:

array = np.array([1, 2, 3, 4, 5])
print(array)


a = np.array([1, 2, 3])
b = np.array([4, 5, 6])
c = a + b

print(c)

#Здесь мы создаём два одномерных массива и выполняем операцию сложения между ними.
# Результат сохраняется в новый массив c. Удобство работы с массивами в NumPy в том,
# что арифметические операции выполняются поэлементно.

#2. Вычисление среднего значения и стандартного отклонения:

array = np.array([1, 2, 3, 4, 5])
mean = np.mean(array)
std_dev = np.std(array)

print(f'Среднее значение: {mean:.2f}')
print(f'Стандартное отклонение: {std_dev:.2f}')

# С помощью встроенных функций np.mean() и np.std() можно быстро вычислить среднее значение
# и стандартное отклонение элементов массива.

#NumPy расширяет возможности Python для численных расчётов и обработки данных.
# Благодаря высокооптимизированным алгоритмам и поддержке многомерных массивов,
# она позволяет эффективно работать с большими объёмами данных, выполняя сложные
# математические операции за минимальное время. Это делает Python удобным языком
# для решения задач машинного обучения, анализа данных и других областей науки и техники.




import pandas as pd

#Библиотека Pandas предоставляет удобные инструменты для работы с табличными данными,
# включая чтение файлов различных форматов, преобразование данных, фильтрацию,
# группировку и объединение наборов данных.

#1. Чтение данных из CSV-файла:

data = pd.read_csv('example.csv')

#Функция read_csv() позволяет легко загрузить данные из файла формата CSV в объект DataFrame,
# который представляет собой таблицу с индексированными строками и столбцами.

#2. Преобразование типа данных:

data['age'] = data['age'].astype(int)

#Здесь мы изменяем тип данных в колонке age на целые числа.
# Это может быть полезно при выполнении арифметических операций или фильтрации данных.

#3. Фильтрация данных:

filtered_data = data.query("age > 30")

#Метод query() используется для фильтрации строк таблицы на основе заданного условия.
# В нашем случае выбираются строки, в которых возраст больше 30 лет.

#4. Группировка и агрегирование данных:

grouped_data = filtered_data.groupby('city')['salary'].mean()

#Мы используем метод groupby(), чтобы сгруппировать данные по значению в колонке city,
# и затем применяем функцию mean(), чтобы найти среднее значение зарплаты для каждой группы.

#5. Объединение данных:

merged_data = pd.merge(data, grouped_data, on='city', how='left')

#Методом merge() объединяются две таблицы на основании общего ключа (в данном случае колонка city)
# с использованием левого объединения (how='left').

print(merged_data.head())

#Pandas облегчает обработку и анализ данных в Python, предоставляя интуитивный интерфейс для работы с таблицами
# и возможность быстрого выполнения сложных операций. Это делает Python мощным инструментом для решения задач
# в области аналитики, статистики и машинного обучения.








